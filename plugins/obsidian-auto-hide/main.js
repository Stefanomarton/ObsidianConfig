/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => AutoHidePlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  expandSidebar_onClickRibbon: false,
  expandSidebar_onClickNoteTitle: false
};
var AutoHidePlugin = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new AutoHideSettingTab(this.app, this));
      this.app.workspace.onLayoutReady(() => {
        this.init();
        this.registerEvents();
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
  init() {
    this.leftSplit = this.app.workspace.leftSplit;
    this.rightSplit = this.app.workspace.rightSplit;
    this.rootSplitEl = this.app.workspace.rootSplit.containerEl;
    this.leftRibbonEl = this.app.workspace.leftRibbon.containerEl;
    this.rightRibbonEl = this.app.workspace.rightRibbon.containerEl;
  }
  registerEvents() {
    this.registerDomEvent(this.rootSplitEl, "click", (evt) => {
      if (evt.target.classList.contains("view-header-title")) {
        if (this.settings.expandSidebar_onClickNoteTitle) {
          if (this.leftSplit.collapsed == true)
            this.leftSplit.expand();
        }
      } else {
        if (!(evt.target.classList.contains("cm-hashtag") || evt.target.classList.contains("tag"))) {
          this.leftSplit.collapse();
          this.rightSplit.collapse();
        }
      }
    });
    this.registerDomEvent(this.leftRibbonEl, "click", (evt) => {
      if (this.settings.expandSidebar_onClickRibbon) {
        if (evt.target == this.leftRibbonEl) {
          if (this.leftSplit.collapsed == true)
            this.leftSplit.expand();
        }
      }
    });
    this.registerDomEvent(this.rightRibbonEl, "click", (evt) => {
      if (this.settings.expandSidebar_onClickRibbon) {
        if (evt.target == this.rightRibbonEl) {
          if (this.rightSplit.collapsed == true)
            this.rightSplit.expand();
        }
      }
    });
  }
};
var AutoHideSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Auto Hide plugin." });
    new import_obsidian.Setting(containerEl).setName("Expand the sidebar with a ribbon").setDesc("Click on the blank area of ribbon to expand the sidebar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.expandSidebar_onClickRibbon).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.expandSidebar_onClickRibbon = value;
      yield this.plugin.saveSettings();
    })));
    new import_obsidian.Setting(containerEl).setName("Expand the sidebar with a note title").setDesc("Click on the note title to expand the left sidebar.").addToggle((toggle) => toggle.setValue(this.plugin.settings.expandSidebar_onClickNoteTitle).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.expandSidebar_onClickNoteTitle = value;
      yield this.plugin.saveSettings();
    })));
  }
};
